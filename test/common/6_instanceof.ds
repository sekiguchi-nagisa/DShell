# primitive type
var a = 1
assert($a is int)
var b = $true
assert($b is boolean)
var c = 3.23
assert($c is float)

# class tyep
#class Hoge {
#	var name = "hey"
#	var id = 12
#}

#class Huga extends Hoge {
#	var isMan = $false
#}

#var d = new Hoge()
#assert($d is Hoge)
#assert(not ($d is Huga))
#var e = new Huga()
#assert($e is Huga)
#assert($e is Hoge)

# func type
function f($a : int, $b : Exception) {
	var c = $a + 12
	log $a
	throw $b
}

assert($f is Func<void, [int, Exception]>)
assert(not($f is Func<float, [int, int]>))

# generic type
var g1 = [1, 2, 3]
var g2 = ["a", "b", "c"]
#var g3 = [new Hoge(), new Huga()]
assert($g1 is Array<int>)
assert($g2 is Array<String>)
#assert($g3 is Array<Hoge>)

var g4 = {"a" : 1, "b" : 2}
var g5 = {"a" : "aa", "b" : "bb"}
assert($g4 is Map<int>)
assert($g5 is Map<String>)
assert(not($g5 is Map<int>))

# Exception type
var h1 = new Exception()
var h2 = new DShellException()
var h3 = new OutOfIndexException()

assert($h1 is Exception)
assert(not($h1 is DShellException))
assert($h2 is DShellException)
assert($h2 is Exception)
assert($h3 is OutOfIndexException)
assert($h3 is Exception)

$h2 = new FileNotFoundException();
assert($h2 is FileNotFoundException);

try {
	1 / 0
} catch($e) {
	assert($e is ArithmeticException)
	assert($e is Exception)
}

# IOStream
assert($STDIN is InputStream)
assert($STDOUT is OutputStream)
assert($STDERR is OutputStream)
